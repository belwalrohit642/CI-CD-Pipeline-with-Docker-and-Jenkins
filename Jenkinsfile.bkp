pipeline {
    agent any
    stages {
        stage("code checkout") {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'gitCred', url: 'https://github.com/belwalrohit642/CI-CD-Pipeline-with-Docker-and-Jenkins.git']])
            }
        }
        stage("Code Stability | Build Image") {
            steps {
                script {
                    docker.build("belwalrohit642/spring3hibernate:${env.BUILD_ID}")
                }
            }
        }
        stage("Code Quality | Checkstyle | Hadolint") {
            parallel {
                stage("Checkstyle") {
                    agent {
                        docker {
                            args "-v ${HOME}/.m2:/root/.m2"
                            image 'opstreedevops/maven:java8'
                        }
                    }
                    steps {
                        git credentialsId: 'gitCred', url: 'https://github.com/belwalrohit642/CI-CD-Pipeline-with-Docker-and-Jenkins.git'
                        sh "mvn checkstyle:checkstyle"
                        recordIssues(tools: [checkStyle(pattern: '**/checkstyle-result.xml')])
                    }
                }
                stage("Hadolint") {
                    steps {
                        sh 'hadolint Dockerfile --no-fail -f json | tee -a hadolint.json'
                        recordIssues(tools: [hadoLint(pattern: 'hadolint.json')])
                    }
                }
            }
        }
        stage("Unit Testing") {
            agent {
                docker {
                    args "-v ${HOME}/.m2:/root/.m2"
                    image 'opstreedevops/maven:java8'
                }
            }
            steps {
                git credentialsId: 'gitCred', url: 'https://github.com/belwalrohit642/CI-CD-Pipeline-with-Docker-and-Jenkins.git'
                sh "mvn test"
                recordIssues(tools: [junitParser(pattern: 'target/surefire-reports/*.xml')])
            }
        }
        stage("Code Coverage") {
            agent {
                docker {
                    args "-v ${HOME}/.m2:/root/.m2"
                    image 'opstreedevops/maven:java8'
                }
            }
            steps {
                git credentialsId: 'git-creds', url: 'https://github.com/belwalrohit642/CI-CD-Pipeline-with-Docker-and-Jenkins.git'
                sh "mvn cobertura:cobertura"
                cobertura autoUpdateHealth: false, autoUpdateStability: false,
                           coberturaReportFile: '**/target/site/cobertura/coverage.xml',
                           conditionalCoverageTargets: '70, 0, 0',
                           failUnhealthy: false,
                           failUnstable: false, lineCoverageTargets: '80, 0, 0',
                           maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0',
                           onlyStable: false, sourceEncoding: 'ASCII',
                           zoomCoverageChart: false
            }
        }
        stage("Security Testing | OWASP | Snyk") {
            parallel {
                stage("Dependency Scan") {
                    agent {
                        docker {
                            args "-v ${HOME}/.m2:/root/.m2"
                            image 'opstreedevops/maven:java8'
                        }
                    }
                    steps {
                        sh "echo Security Testing Done"
                        // Uncomment the following lines if needed
                        // git credentialsId: 'git-creds', url: 'https://github.com/belwalrohit642/CI-CD-Pipeline-with-Docker-and-Jenkins.git'
                        // sh "mvn org.owasp:dependency-check-maven:check"
                        // publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'target', reportFiles: 'dependency-check-report.html', reportName: 'Dependency Check', reportTitles: 'Spring3hibernate'])
                    }
                }
                stage("Container Scan") {
                    steps {
                        snykSecurity snykInstallation: 'snyk', snykTokenId: 'snyk', additionalArguments: "--docker belwalrohit642/spring3hibernate:${env.BUILD_ID}", failOnError: false
                    }
                }
            }
        }
        stage("To DockerHub") {
            steps {
                script {
                    def dockerHubCredentials = 'dockerHubCred'
                    def dockerImageName = "belwalrohit642/spring3hibernate"
                    def dockerImageTag = "${env.BUILD_ID}"
                    def dockerImageFullName = "${dockerImageName}:${dockerImageTag}"

                    // Build and push Docker image to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', dockerHubCredentials) {
                        docker.image(dockerImageFullName).push()
                    }
                }
            }
        }
       stage("Deploy to Dev Environment") {
            steps {
                script {
                    sh "ansible-playbook -i /etc/ansible/inventory.ini  play.yml -e BUILD_NUMBER=${env.BUILD_NUMBER}"
                }
            }
        }
    }
}
